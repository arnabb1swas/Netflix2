{"version":3,"sources":["axios.js","Row.js","request.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoPlay","API_KEY","requests","fetchTrending","fetchNetflixOrignals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","orignal_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Request","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.214f45fb.chunk.js","sourcesContent":["import axios  from 'axios' ;\r\n //base URL to make request to the movie database//\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, { useState , useEffect } from 'react';\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport YouTube from \"react-youtube\"; \r\nimport movieTrailer from \"movie-trailer\"\r\n\r\nconst base_url= \"https://image.tmdb.org/t/p/original\";\r\n\r\nfunction Row({title,fetchUrl,isLargeRow}) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n\r\n async function fetchData() {\r\nconst request = await axios.get(fetchUrl);\r\nsetMovies(request.data.results);\r\nreturn request;\r\n }\r\n fetchData();\r\n    }, [fetchUrl] );\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            autoPlay: 1,\r\n        },\r\n    };\r\n\r\n    const handleClick = (movie) => {\r\n        if(trailerUrl){\r\n            setTrailerUrl('');\r\n        } else {\r\n            movieTrailer(movie?.name || \"\")\r\n            .then(url => {\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n            })\r\n            .catch((error) => console.log(error));\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row_posters\">\r\n            {/*several row posters*/}\r\n                {movies.map((movie) => (\r\n                <img \r\n                key={movie.id}\r\n                onClick={() => handleClick(movie)}\r\n                \r\n                className= {`row_poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                src={`${base_url}${isLargeRow? movie.poster_path: movie.backdrop_path}`}\r\n                alt={movie.name}\r\n                />\r\n                ))}\r\n            </div>\r\n           {trailerUrl && <YouTube videoId = {trailerUrl} opts={opts}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = \"e3205308906e64a5afda5ac8d1ea1dec\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOrignals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./request\";\r\nimport \"./banner.css\";\r\n\r\nfunction Banner() {\r\n\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const request = await axios.get(requests.fetchNetflixOrignals);\r\n            setMovie(\r\n                request.data.results[\r\n                     Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            ); \r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    console.log(movie);\r\n    /* to maintain the overflow for the description we are using overflow function below*/\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n-1) + \"...\" : str;\r\n    }\r\n\r\n    return (\r\n        <header className = \"banner\"\r\n        style={{\r\n            backgroundSize : \"cover\",\r\n            backgroundImage : `url(\r\n            \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n            backgroundPosition : \"center center\",\r\n        }}\r\n        >\r\n            <div className=\"banner__contents\">\r\n             <h1 className= \"banner__title\">{movie?.title || movie?.name || movie?.orignal_name }</h1>\r\n            \r\n                <div className= \"banner__buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">My List</button>    \r\n                </div>\r\n\r\n                <h1 className=\"banner__description\">\r\n        {truncate (movie?.overview, 150)}</h1>\r\n        </div>\r\n\r\n        <div></div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Banner\r\n","import React, { useState, useEffect} from 'react'\r\nimport './Nav.css';\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false);\r\n\r\n    useEffect (() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if (window.scrollY > 100) {\r\n                handleShow(true);\r\n            }\r\n        else handleShow(false);\r\n        });\r\n        return ()=> {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    },[]);\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n           <img\r\n           className= \"nav__logo\"\r\n           src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png\"\r\n           alt=\"Netflix Logo\"\r\n           /> \r\n\r\n           <img\r\n           className= \"nav__avatar\"\r\n           src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\r\n           alt=\"Netflix Logo\"\r\n           /> \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport Request from './request'\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner/>  \n      <Row \n      title=\"NETFLIX ORIGNALS\" \n      fetchUrl = {Request.fetchNetflixOrignals} \n      isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchUrl = {Request.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl = {Request.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl = {Request.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl = {Request.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl = {Request.fetchHorrorMovies} />\n      <Row title=\"Romantic Movies\" fetchUrl = {Request.fetchRomanceMovies} />\n      <Row title=\"Documentries\" fetchUrl = {Request.fetchDocumentries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}